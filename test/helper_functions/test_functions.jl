using CairoMakie, ReferenceTests, StableRNGs

# https://hdl.handle.net/10945/35052
function test_1()
    f = (x, y) -> 0.75 * exp(-((9 * x - 2)^2 + (9 * y - 2)^2) / 4) + 0.75 * exp(-(9 * x + 1)^2 / 49 - (9 * y + 1) / 10) + 0.5 * exp(-((9 * x - 7)^2 + (9 * y - 3)^2) / 4) - 0.2 * exp(-(9 * x - 4)^2 - (9 * y - 7)^2)
    f′ = (x, y) -> [(exp(-(9 * x - 4)^2 - (9 * y - 7)^2) * (162 * x - 72)) / 5 - (3 * exp(-(9 * x - 2)^2 / 4 - (9 * y - 2)^2 / 4) * ((81 * x) / 2 - 9)) / 4 - (exp(-(9 * x - 7)^2 / 4 - (9 * y - 3)^2 / 4) * ((81 * x) / 2 - 63 / 2)) / 2 - (3 * exp(-(9 * y) / 10 - (9 * x + 1)^2 / 49 - 1 / 10) * ((162 * x) / 49 + 18 / 49)) / 4
        (exp(-(9 * x - 4)^2 - (9 * y - 7)^2) * (162 * y - 126)) / 5 - (3 * exp(-(9 * x - 2)^2 / 4 - (9 * y - 2)^2 / 4) * ((81 * y) / 2 - 9)) / 4 - (exp(-(9 * x - 7)^2 / 4 - (9 * y - 3)^2 / 4) * ((81 * y) / 2 - 27 / 2)) / 2 - (27 * exp(-(9 * y) / 10 - (9 * x + 1)^2 / 49 - 1 / 10)) / 40]
    f′′ = (x, y) -> [(162*exp(-(9 * x - 4)^2 - (9 * y - 7)^2))/5-(243*exp(-(9 * y) / 10 - (9 * x + 1)^2 / 49 - 1 / 10))/98-(243*exp(-(9 * x - 2)^2 / 4 - (9 * y - 2)^2 / 4))/8-(81*exp(-(9 * x - 7)^2 / 4 - (9 * y - 3)^2 / 4))/4+(3*exp(-(9 * y) / 10 - (9 * x + 1)^2 / 49 - 1 / 10)*((162*x)/49+18/49)^2)/4+(3*exp(-(9 * x - 2)^2 / 4 - (9 * y - 2)^2 / 4)*((81*x)/2-9)^2)/4+(exp(-(9 * x - 7)^2 / 4 - (9 * y - 3)^2 / 4)*((81*x)/2-63/2)^2)/2-(exp(-(9 * x - 4)^2 - (9 * y - 7)^2)*(162*x-72)^2)/5 (27*exp(-(9 * y) / 10 - (9 * x + 1)^2 / 49 - 1 / 10)*((162*x)/49+18/49))/40+(3*exp(-(9 * x - 2)^2 / 4 - (9 * y - 2)^2 / 4)*((81*x)/2-9)*((81*y)/2-9))/4+(exp(-(9 * x - 7)^2 / 4 - (9 * y - 3)^2 / 4)*((81*x)/2-63/2)*((81*y)/2-27/2))/2-(exp(-(9 * x - 4)^2 - (9 * y - 7)^2)*(162*x-72)*(162*y-126))/5
        (27*exp(-(9 * y) / 10 - (9 * x + 1)^2 / 49 - 1 / 10)*((162*x)/49+18/49))/40+(3*exp(-(9 * x - 2)^2 / 4 - (9 * y - 2)^2 / 4)*((81*x)/2-9)*((81*y)/2-9))/4+(exp(-(9 * x - 7)^2 / 4 - (9 * y - 3)^2 / 4)*((81*x)/2-63/2)*((81*y)/2-27/2))/2-(exp(-(9 * x - 4)^2 - (9 * y - 7)^2)*(162*x-72)*(162*y-126))/5 (243*exp(-(9 * y) / 10 - (9 * x + 1)^2 / 49 - 1 / 10))/400+(162*exp(-(9 * x - 4)^2 - (9 * y - 7)^2))/5-(243*exp(-(9 * x - 2)^2 / 4 - (9 * y - 2)^2 / 4))/8-(81*exp(-(9 * x - 7)^2 / 4 - (9 * y - 3)^2 / 4))/4+(3*exp(-(9 * x - 2)^2 / 4 - (9 * y - 2)^2 / 4)*((81*y)/2-9)^2)/4+(exp(-(9 * x - 7)^2 / 4 - (9 * y - 3)^2 / 4)*((81*y)/2-27/2)^2)/2-(exp(-(9 * x - 4)^2 - (9 * y - 7)^2)*(162*y-126)^2)/5]
    return f, f′, f′′
end
function test_2()
    f = (x, y) -> (1 / 9) * (tanh(9 * y - 9 * x) + 1)
    f′ = (x, y) -> [tanh(9 * x - 9 * y)^2 - 1
        1 - tanh(9 * x - 9 * y)^2]
    f′′ = (x, y) -> [-2*tanh(9 * x - 9 * y)*(9*tanh(9 * x - 9 * y)^2-9) 2*tanh(9 * x - 9 * y)*(9*tanh(9 * x - 9 * y)^2-9)
        2*tanh(9 * x - 9 * y)*(9*tanh(9 * x - 9 * y)^2-9) -2*tanh(9 * x - 9 * y)*(9*tanh(9 * x - 9 * y)^2-9)]
    return f, f′, f′′
end
function test_3()
    f = (x, y) -> (1.25 + cos(5.4 * y)) / (6 * (1 + (3 * x - 1)^2))
    f′ = (x, y) -> [-((108 * x - 36) * (cos((27 * y) / 5) + 5 / 4)) / (6 * (3 * x - 1)^2 + 6)^2
        -(27 * sin((27 * y) / 5)) / (5 * (6 * (3 * x - 1)^2 + 6))]
    f′′ = (x, y) -> [(2*(108*x-36)^2*(cos((27 * y) / 5)+5/4))/(6*(3*x-1)^2+6)^3-(108*(cos((27 * y) / 5)+5/4))/(6*(3*x-1)^2+6)^2 (27*sin((27 * y) / 5)*(108*x-36))/(5*(6*(3*x-1)^2+6)^2)
        (27*sin((27 * y) / 5)*(108*x-36))/(5*(6*(3*x-1)^2+6)^2) -(729 * cos((27 * y) / 5))/(25*(6*(3*x-1)^2+6))]
    return f, f′, f′′
end
function test_4()
    f = (x, y) -> (1 / 3) * exp(-(81 / 16) * ((x - 1 / 2)^2 + (y - 1 / 2)^2))
    f′ = (x, y) -> [-(exp(-(81 * (x - 1 / 2)^2) / 16 - (81 * (y - 1 / 2)^2) / 16) * ((81 * x) / 8 - 81 / 16)) / 3
        -(exp(-(81 * (x - 1 / 2)^2) / 16 - (81 * (y - 1 / 2)^2) / 16) * ((81 * y) / 8 - 81 / 16)) / 3]
    f′′ = (x, y) -> [(exp(-(81 * (x - 1 / 2)^2) / 16 - (81 * (y - 1 / 2)^2) / 16)*((81*x)/8-81/16)^2)/3-(27*exp(-(81 * (x - 1 / 2)^2) / 16 - (81 * (y - 1 / 2)^2) / 16))/8 (exp(-(81 * (x - 1 / 2)^2) / 16 - (81 * (y - 1 / 2)^2) / 16)*((81*x)/8-81/16)*((81*y)/8-81/16))/3
        (exp(-(81 * (x - 1 / 2)^2) / 16 - (81 * (y - 1 / 2)^2) / 16)*((81*x)/8-81/16)*((81*y)/8-81/16))/3 (exp(-(81 * (x - 1 / 2)^2) / 16 - (81 * (y - 1 / 2)^2) / 16)*((81*y)/8-81/16)^2)/3-(27*exp(-(81 * (x - 1 / 2)^2) / 16 - (81 * (y - 1 / 2)^2) / 16))/8]
    return f, f′, f′′
end
function test_5()
    f = (x, y) -> (1 / 3) * exp(-(81 / 4) * ((x - 1 / 2)^2 + (y - 1 / 2)^2))
    f′ = (x, y) -> [-(exp(-(81 * (x - 1 / 2)^2) / 4 - (81 * (y - 1 / 2)^2) / 4) * ((81 * x) / 2 - 81 / 4)) / 3
        -(exp(-(81 * (x - 1 / 2)^2) / 4 - (81 * (y - 1 / 2)^2) / 4) * ((81 * y) / 2 - 81 / 4)) / 3]
    f′′ = (x, y) -> [(exp(-(81 * (x - 1 / 2)^2) / 4 - (81 * (y - 1 / 2)^2) / 4)*((81*x)/2-81/4)^2)/3-(27*exp(-(81 * (x - 1 / 2)^2) / 4 - (81 * (y - 1 / 2)^2) / 4))/2 (exp(-(81 * (x - 1 / 2)^2) / 4 - (81 * (y - 1 / 2)^2) / 4)*((81*x)/2-81/4)*((81*y)/2-81/4))/3
        (exp(-(81 * (x - 1 / 2)^2) / 4 - (81 * (y - 1 / 2)^2) / 4)*((81*x)/2-81/4)*((81*y)/2-81/4))/3 (exp(-(81 * (x - 1 / 2)^2) / 4 - (81 * (y - 1 / 2)^2) / 4)*((81*y)/2-81/4)^2)/3-(27*exp(-(81 * (x - 1 / 2)^2) / 4 - (81 * (y - 1 / 2)^2) / 4))/2]
    return f, f′, f′′
end
function test_6()
    f = (x, y) -> (1 / 9) * (64 - 81 * ((x - 1 / 2)^2 + (y - 1 / 2)^2))^(1 / 2) - 1 / 2
    f′ = (x, y) -> [-(162 * x - 81) / (18 * (64 - 81 * (y - 1 / 2)^2 - 81 * (x - 1 / 2)^2)^(1 / 2))
        -(162 * y - 81) / (18 * (64 - 81 * (y - 1 / 2)^2 - 81 * (x - 1 / 2)^2)^(1 / 2))]
    f′′ = (x, y) -> [-(162 * x - 81)^2/(36*(64-81*(y-1/2)^2-81*(x-1/2)^2)^(3/2))-9/(64-81*(y-1/2)^2-81*(x-1/2)^2)^(1/2) -((162 * x - 81) * (162 * y - 81))/(36*(64-81*(y-1/2)^2-81*(x-1/2)^2)^(3/2))
        -((162 * x - 81) * (162 * y - 81))/(36*(64-81*(y-1/2)^2-81*(x-1/2)^2)^(3/2)) -(162 * y - 81)^2/(36*(64-81*(y-1/2)^2-81*(x-1/2)^2)^(3/2))-9/(64-81*(y-1/2)^2-81*(x-1/2)^2)^(1/2)]
    return f, f′, f′′
end
function point_set_1()
    A = [0.022703 -0.031021
        0.021701 0.257692
        0.001903 0.494360
        0.039541 0.699342
        0.031583 0.910765
        0.132419 0.050133
        0.125444 0.259297
        0.076758 0.417112
        0.062649 0.655223
        0.095867 0.914652
        0.264560 0.029294
        0.208899 0.266878
        0.171473 0.480174
        0.190921 0.687880
        0.230463 0.904651
        0.366317 0.039695
        0.383239 0.238955
        0.346632 0.490299
        0.387316 0.644523
        0.379536 0.893803
        0.414977 -0.028462
        0.420001 0.226247
        0.485566 0.389142
        0.479258 0.632425
        0.397776 0.848971
        0.053989 0.158674
        0.017513 0.341401
        0.050968 0.578285
        0.048706 0.747019
        0.041878 0.996289
        0.109027 0.091855
        0.093454 0.338159
        0.145187 0.561556
        0.145273 0.752407
        0.069556 0.963242
        0.239164 0.060230
        0.276733 0.369604
        0.226678 0.594059
        0.186765 0.818558
        0.242622 0.980541
        0.385766 0.068448
        0.317909 0.312413
        0.377659 0.519930
        0.381292 0.820379
        0.280351 0.971172
        0.427768 0.156096
        0.466363 0.317509
        0.409203 0.508495
        0.481228 0.751101
        0.402732 0.997873
        0.584869 -0.027195
        0.606389 0.270927
        0.574131 0.425942
        0.599010 0.673378
        0.609697 0.924241
        0.661693 0.025596
        0.639647 0.200834
        0.700118 0.489070
        0.690895 0.669783
        0.671889 0.936610
        0.773694 0.028537
        0.741042 0.193658
        0.730603 0.471423
        0.821453 0.668505
        0.807664 0.847679
        0.842457 0.038050
        0.836692 0.208309
        0.847812 0.433563
        0.917570 0.630738
        0.927987 0.904231
        1.044982 -0.012090
        0.985788 0.269584
        1.012929 0.439605
        1.001985 0.694152
        1.041468 0.868208
        0.573008 0.127243
        0.501389 0.347773
        0.610695 0.608471
        0.538062 0.723524
        0.502619 1.030876
        0.642784 0.070783
        0.670396 0.325984
        0.633359 0.509632
        0.689564 0.775957
        0.683767 1.006451
        0.763533 0.102140
        0.825898 0.323577
        0.808661 0.609159
        0.729064 0.802281
        0.817095 1.051236
        0.868405 0.090205
        0.941846 0.331849
        0.859958 0.591014
        0.859633 0.814484
        0.851280 0.969603
        0.967063 0.133411
        0.967631 0.379528
        0.965704 0.504442
        1.035930 0.745992
        0.947151 0.980141]
    return A[:, 1], A[:, 2]
end
function point_set_2()
    A = [
        0.00 0.00
        0.00 1.00
        0.00 0.50
        0.50 1.00
        0.10 0.15
        0.15 0.30
        0.30 0.35
        0.10 0.75
        0.05 0.45
        1.00 0.00
        1.00 1.00
        0.50 0.00
        1.00 0.50
        0.20 0.10
        0.25 0.20
        0.60 0.25
        0.90 0.35
        0.80 0.40
        0.70 0.20
        0.95 0.90
        0.60 0.65
        0.65 0.70
        0.35 0.85
        0.60 0.85
        0.90 0.80
        0.85 0.25
        0.80 0.65
        0.75 0.85
        0.70 0.90
        0.70 0.65
        0.75 0.10
        0.75 0.35
        0.55 0.95
    ]
    return A[:, 1], A[:, 2]
end
function point_set_3()
    A = [
        0.1375 0.97500
        0.9125 0.98750
        0.7125 0.76250
        0.2250 0.83750
        0.0500 0.41250
        0.4750 0.63750
        0.0500 -0.05000
        0.4500 1.03750
        1.0875 0.55000
        0.5375 0.80000
        0.0375 0.75000
        0.1875 0.57500
        0.7125 0.55000
        0.8500 0.43750
        0.7000 0.31250
        0.2750 0.42500
        0.4500 0.28750
        0.8125 0.18750
        0.4500 -0.03750
        1.0000 0.26250
        0.5000 0.46250
        0.1875 0.26250
        0.5875 0.12500
        1.0500 -0.06125
        0.1000 0.11250
    ]
    return A[:, 1], A[:, 2]
end

function test_interpolant(itp, x, y, f)
    for method in (Farin(1), :sibson, :triangle, :nearest, :laplace, Sibson(1), Hiyoshi(2))
        for _ in 1:500
            vals = itp(x, y; parallel=false, method)
            vals2 = similar(vals)
            itp(vals2, x, y; parallel=false, method)
            vals3 = itp(x, y; parallel=true, method)
            vals4 = similar(vals3)
            itp(vals4, x, y; parallel=true, method)
            for i in eachindex(x, y)
                _x = x[i]
                _y = y[i]
                if method ≠ :nearest
                    _z = f isa Function ? f(_x, _y) : f[i]
                else
                    m = DT.jump_to_voronoi_polygon(itp.triangulation, (_x, _y))
                    _z = f isa Function ? f(get_point(itp.triangulation, m)...) : f[m]
                end
                @test all(val -> isapprox(val, _z, rtol=1e-1), (itp(_x, _y; method), vals[i], vals2[i], vals3[i], vals4[i]))
            end
        end
    end
end

function rrmse(z, ẑ)
    num = 0.0
    den = 0.0
    for (zᵢ, ẑᵢ) in zip(z, ẑ)
        if all(isfinite, (zᵢ..., ẑᵢ...))
            num += norm(zᵢ .- ẑᵢ)^2
            den += norm(ẑᵢ)^2
        end
    end
    return 100sqrt(num / den)
end
